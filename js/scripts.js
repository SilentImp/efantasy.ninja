"use strict";function _classCallCheck(n,e){if(!(n instanceof e))throw new TypeError("Cannot call a class as a function")}var _createClass=function(){function n(n,e){for(var t=0;t<e.length;t++){var a=e[t];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(n,a.key,a)}}return function(e,t,a){return t&&n(e.prototype,t),a&&n(e,a),e}}();!function(){var n=function(){function n(){_classCallCheck(this,n);var e=new Promise(function(n,e){return"loading"!=document.readyState?n():void document.addEventListener("DOMContentLoaded",function(){return n()})});e.then(this.init.bind(this))}return _createClass(n,[{key:"init",value:function(){var n=document.querySelector(".account__input_date");null!=n&&(this.dirthday=new Pikaday({field:document.querySelector(".account__input_date"),format:"YYYY-MM-DD"}))}}]),n}();new n}();
"use strict";function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}var _createClass=function(){function e(e,t){for(var a=0;a<t.length;a++){var r=t[a];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,a,r){return a&&e(t.prototype,a),r&&e(t,r),t}}();!function(){var e=function(){function e(){_classCallCheck(this,e);var t=new Promise(function(e,t){return"loading"!=document.readyState?e():void document.addEventListener("DOMContentLoaded",function(){return e()})});t.then(this.init.bind(this))}return _createClass(e,[{key:"init",value:function(){var e=this;if(this.widget=document.querySelector(".edit"),null!=this.widget){var t=this.widget.querySelectorAll(".button_add"),a=this.widget.querySelectorAll(".button_remove");this.players=this.widget.querySelector(".edit__available-players"),this.team=this.widget.querySelector(".edit__players"),this.form=this.widget.querySelector("form.edit__teamer"),this.popup=this.widget.querySelector(".edit__popup"),this.popup_close=this.popup.querySelector(".edit__popup-close"),[].forEach.call(t,function(t){t.addEventListener("click",e.addPlayer.bind(e))}),[].forEach.call(a,function(t){t.addEventListener("click",e.removePlayer.bind(e))}),this.popup_close.addEventListener("click",this.closePopup.bind(this)),this.form.addEventListener("submit",this.checkTeam.bind(this))}}},{key:"closePopup",value:function(e){this.popup.style.display="none"}},{key:"checkTeam",value:function(e){var t=e.currentTarget.querySelectorAll(".teamer");return t.length<8?(this.popup.style.display="block",void e.preventDefault()):void 0}},{key:"removePlayer",value:function(e){var t=e.currentTarget.closest(".teamer"),a=parseInt(t.getAttribute("data-id"),10),r=document.createElement("li");r.classList.add("edit__player"),t.parentNode.parentNode.removeChild(t.parentNode),this.players.querySelector('[data-id="'+a+'"]').classList.remove("edit__available_added"),this.team.appendChild(r)}},{key:"addPlayer",value:function(e){var t=e.currentTarget.closest("tr");if(!t.classList.contains("edit__available_added")){var a=this.team.querySelectorAll(".teamer"),r=void 0;if(0==a.length)r=this.team.querySelector(".edit__player");else if(r=a[a.length-1].parentNode.nextElementSibling,null==r)return;var i=t.querySelector(".edit__available-name").textContent,n=t.querySelector(".edit__available-players-salary").textContent,l=t.querySelector(".edit__available-avatar").getAttribute("src"),d=t.getAttribute("data-id"),s=this.createPlayer(d,l,i,n);r.appendChild(s),t.classList.add("edit__available_added")}}},{key:"createPlayer",value:function(e,t,a,r){var i=document.createElement("DIV"),n=document.createElement("P"),l=document.createElement("P"),d=document.createElement("BUTTON"),s=document.createElement("INPUT"),c=document.createElement("IMG");return i.setAttribute("data-id",e),i.classList.add("teamer"),n.classList.add("teamer__name"),n.appendChild(document.createTextNode(a)),l.classList.add("teamer__salary"),l.appendChild(document.createTextNode(r)),c.classList.add("teamer__avatar"),c.setAttribute("alt","Avatar"),c.setAttribute("src",t),s.setAttribute("type","hidden"),s.setAttribute("name","team[]"),s.setAttribute("value",e),d.classList.add("button"),d.classList.add("button_remove"),d.classList.add("teamer__remove"),d.setAttribute("type","button"),d.appendChild(document.createTextNode("-")),d.addEventListener("click",this.removePlayer.bind(this)),i.appendChild(c),i.appendChild(n),i.appendChild(l),i.appendChild(d),i.appendChild(s),i}}]),e}();new e}();
"use strict";function _classCallCheck(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}var _createClass=function(){function t(t,e){for(var n=0;n<e.length;n++){var a=e[n];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(t,a.key,a)}}return function(e,n,a){return n&&t(e.prototype,n),a&&t(e,a),e}}();!function(){var t=function(){function t(){_classCallCheck(this,t);var e=new Promise(function(t,e){return"loading"!=document.readyState?t():void document.addEventListener("DOMContentLoaded",function(){return t()})});e.then(this.init.bind(this))}return _createClass(t,[{key:"init",value:function(){var t=this;if(this.filter=document.querySelector(".filter"),null!=this.filter){this.container=document.querySelector("[data-container="+this.filter.getAttribute("data-target")+"]");var e=this.filter.querySelectorAll("input[data-filter]");[].forEach.call(e,function(e){e.addEventListener("change",t.filterFields.bind(t))})}}},{key:"filterFields",value:function(t){var e=t.currentTarget,n=e.getAttribute("data-filter");"all"==n?[].forEach.call(this.container.querySelectorAll("[data-tag]"),function(t){t.classList.toggle("hidden",!1)}):[].forEach.call(this.container.querySelectorAll("[data-tag]"),function(t){t.getAttribute("data-tag").toLowerCase()==n.toLowerCase()?t.classList.toggle("hidden",!1):t.classList.toggle("hidden",!0)})}}]),t}();new t}();
"use strict";function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}var _createClass=function(){function e(e,t){for(var i=0;i<t.length;i++){var n=t[i];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,i,n){return i&&e(t.prototype,i),n&&e(t,n),t}}();!function(){var e=function(){function e(){_classCallCheck(this,e);var t=new Promise(function(e,t){return"loading"!=document.readyState?e():void document.addEventListener("DOMContentLoaded",function(){return e()})});t.then(this.init.bind(this))}return _createClass(e,[{key:"init",value:function(){var e=this,t=document.querySelector(".landing"),i=t.querySelector(".landing__header"),n=i.querySelector(".landing__wrapper");null!=t&&document.documentElement.classList.contains("video")&&document.documentElement.classList.contains("videoautoplay")&&!function(){var o=t.getAttribute("data-video").split(","),a=parseInt(t.getAttribute("data-video-width"),10),r=parseInt(t.getAttribute("data-video-height"),10),d=void 0,s=void 0,u=o.length,c=void 0,l=document.createElement("video");for(d=i.offsetWidth+20,s=d*r/a,s<i.offsetHeight&&(s=i.offsetHeight+20,d=a*s/r),l.style.height=s+"px",l.style.width=d+"px",l.setAttribute("autoplay",!0),l.setAttribute("autobuffer",!0),l.setAttribute("preload",!0),l.setAttribute("mute",!0),l.setAttribute("loop",!0),l.classList.add("movie"),l.addEventListener("canplaythrough",function(){l.style.opacity=1});u--;)c=document.createElement("source"),c.setAttribute("src",o[u]),l.appendChild(c);n.appendChild(l),e.video=l,window.addEventListener("resize",e.resized.bind(e))}()}},{key:"resized",value:function(){var e=document.querySelector(".landing"),t=e.querySelector(".landing__header"),i=void 0,n=void 0,o=parseInt(e.getAttribute("data-video-width"),10),a=parseInt(e.getAttribute("data-video-height"),10);i=t.offsetWidth+20,n=i*a/o,n<t.offsetHeight&&(n=t.offsetHeight+20,i=o*n/a),this.video.style.height=n+"px",this.video.style.width=i+"px"}}]),e}();setTimeout(function(){new e},500)}();
"use strict";function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}var _createClass=function(){function e(e,t){for(var o=0;o<t.length;o++){var n=t[o];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,o,n){return o&&e(t.prototype,o),n&&e(t,n),t}}();!function(){var e=function(){function e(){_classCallCheck(this,e);var t=new Promise(function(e,t){return"loading"!=document.readyState?e():void document.addEventListener("DOMContentLoaded",function(){return e()})});t.then(this.init.bind(this))}return _createClass(e,[{key:"init",value:function(){var e=this;if(this.popup_login=document.querySelector(".landing-popup_login"),this.popup_register=document.querySelector(".landing-popup_register"),this.lightbox=document.querySelector(".landing-popup__lightbox"),null!=this.popup_login&&null!=this.popup_register&&null!=this.lightbox){var t=document.querySelectorAll(".landing__register, .landing-popup__open-register"),o=document.querySelectorAll(".landing__login, .landing-popup__open-login"),n=document.querySelectorAll(".landing-popup__close, .landing-popup__lightbox");this.open=!1,document.body.classList.toggle("popup_open",this.open),[].forEach.call(t,function(t){t.addEventListener("click",e.openRegistration.bind(e))}),[].forEach.call(o,function(t){t.addEventListener("click",e.openLogin.bind(e))}),[].forEach.call(n,function(t){t.addEventListener("click",e.closeAll.bind(e))})}}},{key:"openLogin",value:function(){this.open?(Velocity(this.popup_register,"fadeOut"),this.popup_register.reset()):Velocity(this.lightbox,"fadeIn"),Velocity(this.popup_login,"fadeIn"),this.open=!0,document.body.classList.toggle("popup_open",this.open)}},{key:"openRegistration",value:function(){this.open?(Velocity(this.popup_login,"fadeOut"),this.popup_login.reset()):Velocity(this.lightbox,"fadeIn"),Velocity(this.popup_register,"fadeIn"),this.open=!0,document.body.classList.toggle("popup_open",this.open)}},{key:"closeAll",value:function(){Velocity(this.lightbox,"stop"),Velocity(this.popup_login,"stop"),Velocity(this.popup_register,"stop"),Velocity(this.lightbox,"fadeOut"),Velocity(this.popup_login,"fadeOut"),Velocity(this.popup_register,"fadeOut"),this.popup_register.reset(),this.popup_login.reset(),this.open=!1,document.body.classList.toggle("popup_open",this.open)}}]),e}();new e}();
"use strict";function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}var _createClass=function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}();!function(){var e=function(){function e(){_classCallCheck(this,e);var t=new Promise(function(e,t){return"loading"!=document.readyState?e():void document.addEventListener("DOMContentLoaded",function(){return e()})});t.then(this.init.bind(this))}return _createClass(e,[{key:"init",value:function(){if(this.menu=document.querySelector(".navigation"),null!=this.menu){this.open=!1,this.wrapper=this.menu.querySelector(".navigation__wrapper");var e=this.menu.querySelector(".navigation__toggle");e.addEventListener("click",this.toggleMenu.bind(this)),window.addEventListener("resize",this.resized.bind(this))}}},{key:"resized",value:function(){Modernizr.mq("(min-width: 1000px)")&&this.open&&(this.open=!1,this.wrapper.removeAttribute("style"),this.menu.classList.toggle("navigation_open",!1))}},{key:"toggleMenu",value:function(){this.open=!this.open,Velocity(this.wrapper,"stop"),this.menu.classList.toggle("navigation_open"),this.open?Velocity(this.wrapper,{translateY:this.wrapper.offsetHeight+this.menu.offsetHeight},{duration:250}):Velocity(this.wrapper,{translateY:0},{duration:250})}}]),e}();new e}();
"use strict";function _classCallCheck(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}var _createClass=function(){function t(t,e){for(var o=0;o<e.length;o++){var n=e[o];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}return function(e,o,n){return o&&t(e.prototype,o),n&&t(e,n),e}}();!function(){var t=function(){function t(){_classCallCheck(this,t);var e=new Promise(function(t,e){return"loading"!=document.readyState?t():void document.addEventListener("DOMContentLoaded",function(){return t()})});e.then(this.init.bind(this))}return _createClass(t,[{key:"init",value:function(){var t=this;if(this.popup=document.querySelector(".popup"),null!=this.popup){this.lightbox=document.querySelector(".popup__lightbox");var e=document.querySelector(".popup__close"),o=document.querySelectorAll(".popup__button"),n=document.querySelectorAll('[data-action="open popup"]');this.current_button=document.querySelector(".popup__button_current"),this.current_tab=document.querySelector(".popup__tab_current"),e.addEventListener("click",this.closePopup.bind(this)),this.lightbox.addEventListener("click",this.closePopup.bind(this)),[].forEach.call(o,function(e){e.addEventListener("click",t.openTab.bind(t))}),[].forEach.call(n,function(e){e.addEventListener("click",t.openPopup.bind(t))})}}},{key:"openTab",value:function(t){var e=t.currentTarget,o=e.getAttribute("data-target"),n=document.querySelector('[data-tab="'+o+'"]');this.current_button.classList.remove("popup__button_current"),this.current_tab.classList.remove("popup__tab_current"),e.classList.add("popup__button_current"),n.classList.add("popup__tab_current"),this.current_button=e,this.current_tab=n}},{key:"closePopup",value:function(){document.body.classList.toggle("popup-opened",!1),Velocity(this.lightbox,"stop"),Velocity(this.lightbox,"fadeOut",{duration:250}),Velocity(this.popup,"stop"),Velocity(this.popup,"fadeOut",{duration:250})}},{key:"openPopup",value:function(){document.body.classList.toggle("popup-opened",!0),Velocity(this.lightbox,"stop"),Velocity(this.lightbox,"fadeIn",{duration:250}),Velocity(this.popup,"stop"),Velocity(this.popup,"fadeIn",{duration:250})}}]),t}();window.popup=new t}();
"use strict";function _classCallCheck(e,n){if(!(e instanceof n))throw new TypeError("Cannot call a class as a function")}var _createClass=function(){function e(e,n){for(var t=0;t<n.length;t++){var i=n[t];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}return function(n,t,i){return t&&e(n.prototype,t),i&&e(n,i),n}}();!function(){var e=function(){function e(){_classCallCheck(this,e);var n=new Promise(function(e,n){return"loading"!=document.readyState?e():void document.addEventListener("DOMContentLoaded",function(){return e()})});n.then(this.init.bind(this))}return _createClass(e,[{key:"init",value:function(){var e=this,n=document.querySelectorAll(".questions__item");[].forEach.call(n,function(n){n.addEventListener("click",e.toggleQuestion.bind(e))})}},{key:"toggleQuestion",value:function(e){e.currentTarget.classList.toggle("questions__item_open")}}]),e}();new e}();
//# sourceMappingURL=data:application/json;base64,